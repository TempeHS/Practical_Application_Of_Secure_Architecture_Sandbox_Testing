<%- include('layout') %>

    <h1>üö® Vulnerable Node.js Application</h1>

    <% if (!user) { %>
        <div class="vuln-demo">
            <h3>üîë Login (SQL Injection Test)</h3>
            <form id="loginForm">
                <input type="text" name="username" placeholder="Username" required>
                <input type="password" name="password" placeholder="Password" required>
                <button type="submit" class="btn">Login</button>
            </form>
            <p><em>Try SQL injection: <code>admin' OR '1'='1' --</code> in username field</em></p>
            <div id="loginResult" class="output" style="display: none;"></div>
        </div>
        <% } %>

            <div class="vuln-demo">
                <h3>üîç User Search (SQL Injection)</h3>
                <form id="searchForm">
                    <input type="text" name="q" placeholder="Search users">
                    <button type="submit" class="btn">Search</button>
                </form>
                <p><em>Try: <code>' UNION SELECT password,email FROM users --</code></em></p>
                <div id="searchResult" class="output" style="display: none;"></div>
            </div>

            <div class="vuln-demo">
                <h3>üíª Command Execution</h3>
                <form id="pingForm">
                    <input type="text" name="host" placeholder="Host to ping">
                    <button type="submit" class="btn">Ping</button>
                </form>
                <p><em>Try: <code>127.0.0.1; ls -la</code> or <code>127.0.0.1 && whoami</code></em></p>
                <div id="pingResult" class="output" style="display: none;"></div>
            </div>

            <div class="vuln-demo">
                <h3>üìÅ File Operations (Path Traversal)</h3>
                <form id="fileForm">
                    <input type="text" name="filename" placeholder="Filename to read">
                    <button type="submit" class="btn">Read File</button>
                </form>
                <p><em>Try: <code>../../../etc/passwd</code> or <code>../app.js</code></em></p>
                <div id="fileResult" class="output" style="display: none;"></div>
            </div>

            <div class="vuln-demo">
                <h3>üì§ File Upload (No Validation)</h3>
                <form id="uploadForm">
                    <input type="text" name="filename" placeholder="Filename" required>
                    <br><br>
                    <textarea name="content" placeholder="File content" rows="4" cols="50"></textarea>
                    <br><br>
                    <button type="submit" class="btn">Upload File</button>
                </form>
                <p><em>Try uploading: <code>shell.js</code> with malicious content</em></p>
                <div id="uploadResult" class="output" style="display: none;"></div>
            </div>

            <div class="vuln-demo">
                <h3>üåê Server-Side Request Forgery (SSRF)</h3>
                <form id="ssrfForm">
                    <input type="text" name="url" placeholder="URL to fetch" style="width: 400px;">
                    <button type="submit" class="btn">Fetch URL</button>
                </form>
                <p><em>Try: <code>http://localhost:3000/debug</code> or <code>file:///etc/passwd</code></em></p>
                <div id="ssrfResult" class="output" style="display: none;"></div>
            </div>

            <div class="vuln-demo">
                <h3>üîç Information Disclosure</h3>
                <a href="/api/users" class="btn">View All Users (API)</a>
                <a href="/debug" class="btn">Debug Info</a>
                <p><em>These endpoints expose sensitive information</em></p>
            </div>

            <p><strong>Default Credentials:</strong> admin/admin123 or user/user123</p>
            <p><em>This application demonstrates common Node.js vulnerabilities for educational purposes.</em></p>

            </div>
            </body>

            <script>
                // Login form handler
                document.getElementById('loginForm').addEventListener('submit', async (e) => {
                    e.preventDefault();
                    const formData = new FormData(e.target);
                    const data = Object.fromEntries(formData);

                    try {
                        const response = await fetch('/login', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(data)
                        });

                        const result = await response.json();
                        const resultDiv = document.getElementById('loginResult');
                        resultDiv.style.display = 'block';
                        resultDiv.textContent = JSON.stringify(result, null, 2);

                        if (result.success && result.redirect) {
                            setTimeout(() => {
                                window.location.href = result.redirect;
                            }, 2000);
                        }
                    } catch (error) {
                        console.error('Error:', error);
                    }
                });

                // Search form handler
                document.getElementById('searchForm').addEventListener('submit', async (e) => {
                    e.preventDefault();
                    const formData = new FormData(e.target);
                    const params = new URLSearchParams(formData);

                    try {
                        const response = await fetch(`/search?${params}`);
                        const result = await response.json();
                        const resultDiv = document.getElementById('searchResult');
                        resultDiv.style.display = 'block';
                        resultDiv.textContent = JSON.stringify(result, null, 2);
                    } catch (error) {
                        console.error('Error:', error);
                    }
                });

                // Ping form handler
                document.getElementById('pingForm').addEventListener('submit', async (e) => {
                    e.preventDefault();
                    const formData = new FormData(e.target);
                    const data = Object.fromEntries(formData);

                    try {
                        const response = await fetch('/ping', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(data)
                        });

                        const result = await response.json();
                        const resultDiv = document.getElementById('pingResult');
                        resultDiv.style.display = 'block';
                        resultDiv.textContent = JSON.stringify(result, null, 2);
                    } catch (error) {
                        console.error('Error:', error);
                    }
                });

                // File form handler
                document.getElementById('fileForm').addEventListener('submit', async (e) => {
                    e.preventDefault();
                    const formData = new FormData(e.target);
                    const filename = formData.get('filename');

                    try {
                        const response = await fetch(`/files/${filename}`);
                        const result = await response.json();
                        const resultDiv = document.getElementById('fileResult');
                        resultDiv.style.display = 'block';
                        resultDiv.textContent = JSON.stringify(result, null, 2);
                    } catch (error) {
                        console.error('Error:', error);
                    }
                });

                // Upload form handler
                document.getElementById('uploadForm').addEventListener('submit', async (e) => {
                    e.preventDefault();
                    const formData = new FormData(e.target);
                    const data = Object.fromEntries(formData);

                    try {
                        const response = await fetch('/upload', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(data)
                        });

                        const result = await response.json();
                        const resultDiv = document.getElementById('uploadResult');
                        resultDiv.style.display = 'block';
                        resultDiv.textContent = JSON.stringify(result, null, 2);
                    } catch (error) {
                        console.error('Error:', error);
                    }
                });

                // SSRF form handler
                document.getElementById('ssrfForm').addEventListener('submit', async (e) => {
                    e.preventDefault();
                    const formData = new FormData(e.target);
                    const data = Object.fromEntries(formData);

                    try {
                        const response = await fetch('/fetch-url', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(data)
                        });

                        const result = await response.json();
                        const resultDiv = document.getElementById('ssrfResult');
                        resultDiv.style.display = 'block';
                        resultDiv.textContent = JSON.stringify(result, null, 2);
                    } catch (error) {
                        console.error('Error:', error);
                    }
                });

                // Logout function
                async function logout() {
                    try {
                        const response = await fetch('/logout', { method: 'POST' });
                        const result = await response.json();
                        if (result.success) {
                            window.location.href = '/';
                        }
                    } catch (error) {
                        console.error('Error:', error);
                    }
                }
            </script>

            </html>